---
title: "COVID-19"
output:
  
 html_document:
    theme: flatly
    highlight: tango
#    code_folding: hide
    toc_depth: 3
    toc: true
    toc_float: true
    # include:
    #   after_body: footer.html
    # css: styles.css
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
# COVID-19 VISUALIZATIONS
# ----------------------------

# This script downloads and creates interactive visualizations
# of COVID-19 data provided by John Hopkins University and related data,
# focusing on Brazil


# Author: Michel Szklo
# Date: March 2020

###################################################################


# =================================================================
# 0 Set-up
# =================================================================

rm(list=ls())

# packages
packages<-c('readr','tidyverse','dplyr','RCurl','tidyr','scales','RColorBrewer','plotly','knitr','ggplot2','sf','sp','xlsx','httr','mapview','zoo','emdbook','lattice')
to_install<-packages[!(packages %in% installed.packages()[,"Package"])]
if(length(to_install)>0) install.packages(to_install)

lapply(packages,require,character.only=TRUE)



# =================================================================
# 1 Data download and mgmt of John Hopkins Data
# =================================================================

# -----------------------------------------------------------------
# confirmed
# -----------------------------------------------------------------
url_confirmed <- getURL('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv')
confirmed <- read.csv(text=url_confirmed)

confirmed <-  confirmed %>%
  select(-c('Province.State','Lat','Long')) %>% 
  group_by(Country.Region) %>%
  summarise_all(funs(sum))

dates <- colnames(confirmed)
dates <- dates[2:length(dates)]

confirmed <- pivot_longer(confirmed,
                          cols=all_of(dates),
                          names_to = 'date',
                          values_to = 'cases')


# -----------------------------------------------------------------
# deaths
# -----------------------------------------------------------------

url_death <- getURL('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv')
death <- read.csv(text=url_death)

death <-  death %>%
  select(-c('Province.State','Lat','Long')) %>% 
  group_by(Country.Region) %>%
  summarise_all(funs(sum))

dates <- colnames(death)
dates <- dates[2:length(dates)]

death <- pivot_longer(death,
                          cols=all_of(dates),
                          names_to = 'date',
                          values_to = 'deaths')

# -----------------------------------------------------------------
# Recovered
# -----------------------------------------------------------------

url_recovered <- getURL('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv')
recovered <- read.csv(text=url_recovered)

recovered <-  recovered %>%
  select(-c('Province.State','Lat','Long')) %>% 
  group_by(Country.Region) %>%
  summarise_all(funs(sum))

# dates_aux <- as.vector(unique(death$date))[1:63]
# names(recovered)[2:64] <- dates_aux
# dates <- colnames(recovered)
# dates <- dates[2:length(dates)]

dates <- colnames(recovered)
dates <- dates[2:length(dates)]


recovered <- pivot_longer(recovered,
                          cols=all_of(dates),
                          names_to = 'date',
                          values_to = 'recoveries')



# -----------------------------------------------------------------
#  Confirmed + Deaths + Recovered
# -----------------------------------------------------------------

covid <- left_join(confirmed,
                   death,
                   by=c('Country.Region','date'))
covid <- left_join(covid,
                   recovered,
                   by=c('Country.Region','date'))

covid[is.na(covid)]<-0

# JH stoped providing time series, from 2020-04-01 only daily updates
# url_daily <- getURL(paste0('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/',today,'.csv'))
# daily <- read.csv(text=url_daily)
# 
# today <- gsub("-",".",today)
# today <- paste0("X",substr(today,2,nchar(today)))
# 
# daily <- daily %>%
#   group_by(Country_Region) %>% 
#   summarise(cases=sum(Confirmed),deaths=sum(Deaths),recoveries=sum(Recovered)) %>% 
#   rename("Country.Region"="Country_Region")
# daily$date <- today
# 
# covid <- rbind.data.frame(covid,daily)

# -----------------------------------------------------------------
#  Creating variable 'days since first case' 
# -----------------------------------------------------------------

covid <- covid %>%
  mutate(num = ifelse(cases >= 100, 1, 0)) %>% 
  group_by(Country.Region) %>% 
  filter(cases>0) %>% 
  mutate(start_date=cumsum(num)) %>%
  select(-num)


# adjustment for China as JHU only started to provide information on Jan22nd, after the outbreak in china 
covid <- covid %>%
  mutate(start_date= ifelse(Country.Region=="China",start_date+22,start_date)) %>% 
  group_by(Country.Region) %>% 
  mutate(max=max(cases))

# -----------------------------------------------------------------
# selecting only the  13 countries with more cases + brasil
# -----------------------------------------------------------------
covid_max <- covid %>%
  group_by(Country.Region) %>% 
  summarise(max=max(cases)) %>% 
  arrange(-max) %>% 
  slice(1:12) %>%
  select(Country.Region)
covid_max[13,] <- "Brazil"

covid_select <- covid
covid_select$select <- covid$Country.Region %in% covid_max$Country.Region
covid_select <- covid_select %>%
  filter(select==TRUE) %>%
  mutate(Data=as.character(date)) %>% 
  mutate(Data=substring(date,2,length(date))) %>% 
  mutate(Data=as.Date(Data, format=c('%m.%d'))) %>%
  select(c('Country.Region','cases','deaths','recoveries','start_date','Data','max')) %>% 
  rename('Pa?s'='Country.Region') %>% 
  rename('Dias desde o 100o caso' = 'start_date') %>% 
  rename ('Casos confirmados' = 'cases') %>% 
  rename('Mortes'= 'deaths') %>%
  rename ('Casos recuperados'='recoveries')


# -----------------------------------------------------------------
# selecting only the 50 countries with more cases + brasil
# -----------------------------------------------------------------
covid_max2 <- covid %>%
  group_by(Country.Region) %>% 
  summarise(max=max(cases)) %>% 
  arrange(-max) %>% 
  slice(1:50) %>%
  select(Country.Region)

covid_select2 <- covid
covid_select2$select <- covid$Country.Region %in% covid_max2$Country.Region
covid_select2 <- covid_select2 %>%
  filter(select==TRUE) %>%
  mutate(Data=as.character(date)) %>% 
  mutate(Data=substring(date,2,length(date))) %>% 
  mutate(Data=as.Date(Data, format=c('%m.%d'))) %>%
  select(c('Country.Region','cases','deaths','recoveries','start_date','Data','max')) %>% 
  rename('Pa?s'='Country.Region') %>% 
  rename('Dias desde o 100o caso' = 'start_date') %>% 
  rename ('Casos confirmados' = 'cases') %>% 
  rename('Mortes'= 'deaths') %>%
  rename ('Casos recuperados'='recoveries')



# -----------------------------------------------------------------
# collapsing world cases, death, recoveries by date
# -----------------------------------------------------------------
covid_all <- covid %>%
  group_by(date) %>%
  summarise(`Casos confirmados`=sum(cases),Mortes=sum(deaths),`Casos recuperados`=sum(recoveries)) %>% 
  mutate(Data=as.character(date)) %>% 
  mutate(Data=substring(date,2,length(date))) %>% 
  mutate(Data=as.Date(Data, format=c('%m.%d'))) %>% 
  arrange(Data) %>% 
  select(-date)


covid_all_pct <-  covid_all %>% 
  mutate(rec_death= Mortes +`Casos recuperados`,
         Mortes=Mortes/rec_death,
         `Casos recuperados`=`Casos recuperados`/rec_death)

covid_all_pct <- pivot_longer(covid_all_pct,
                            cols=c('Mortes','Casos recuperados'),
                            names_to = 'Atingidos',
                            values_to = 'Percentual')

# -----------------------------------------------------------------
# Data for brazil 'affected' plot
# -----------------------------------------------------------------

covid_brazil <- covid_select %>% 
  filter(Pa?s=="Brazil")

covid_brazil_aff <- covid_brazil %>%
  select(c('Casos confirmados','Casos recuperados','Mortes','Data'))

covid_brazil_aff <- pivot_longer(covid_brazil_aff,
                                 cols=c('Casos confirmados','Casos recuperados','Mortes'),
                                 names_to='Afetados',
                                 values_to = 'N?mero')


# -----------------------------------------------------------------
# New cases per day moving average
# -----------------------------------------------------------------

covid_select <- covid_select %>%
  group_by(Pa?s) %>% 
  mutate(`Casos confirmados (m?dia m?vel, 10 dias)` = as.numeric(rollmean(`Casos confirmados`, k = 10, fill = NA, align = "right"))) %>% 
  ungroup()

# =================================================================
# 2 Brazil cases by states (wesley cota data)
# =================================================================

url_estado <- getURL('https://raw.githubusercontent.com/wcota/covid19br/master/cases-brazil-states.csv')
estado <- read.csv(text=url_estado)

estado <- estado %>% 
  filter(state!="TOTAL") %>% 
  rename("Casos confirmados"="totalCases","Casos confirmados (por 100 habitantes)" = "totalCases_per_100k_inhabitants","Cidade"="city","Estado"="state","Mortes"="deaths") %>%
  mutate(date=as.character(date)) %>%
  mutate(Data=as.Date(date, format=c('%Y-%m-%d'))) %>% 
  select(-date) %>% 
  select(c("Estado","Data","Casos confirmados","Casos confirmados (por 100 habitantes)","Mortes"))

estado_max <- estado %>%
  group_by(Estado) %>% 
  summarise(max=max(`Casos confirmados`)) %>% 
  arrange(-max) %>% 
  slice(1:15) %>% 
  select(Estado)

estado_select <- estado
estado_select$select <- estado$Estado %in% estado_max$Estado
estado_select <- estado_select %>% 
  filter(select==TRUE) %>% 
  select(-select)

estado_select <- estado_select %>% 
  mutate(num = ifelse(`Casos confirmados` >= 100, 1, 0)) %>%
  group_by(Estado) %>% 
  filter(`Casos confirmados`>0) %>% 
  mutate(start_date=cumsum(num)) %>% 
  select(-num) %>% 
  rename("Dias desde o 100o caso"="start_date") %>% 
  mutate(`Casos confirmados (m?dia m?vel, 10 dias)` = as.numeric(rollmean(`Casos confirmados`, k = 10, fill = NA, align = "right"))) %>% 
  ungroup()



brazil_select <- estado %>% 
  group_by(Data) %>% 
  summarise(`Casos confirmados`=sum(`Casos confirmados`),Mortes = sum(Mortes), ) %>% 
  mutate(num = ifelse(`Casos confirmados` >= 100, 1, 0)) %>%
  filter(`Casos confirmados`>0) %>% 
  mutate(start_date=cumsum(num)) %>% 
  select(-num) %>% 
  rename("Dias desde o 100o caso"="start_date")

brazil_select$Pa?s <- "Brasil"

# =================================================================
# 3 Brazil cases by municipalities (wesley cota data)
# =================================================================

url_mun <- getURL('https://raw.githubusercontent.com/wcota/covid19br/master/cases-brazil-cities-time.csv')
mun <- read.csv(text=url_mun)

mun <- mun %>%
  filter(city!="TOTAL") %>% 
  rename("Casos confirmados"="totalCases","Mortes" = "deaths","Cidade"="city","Estado"="state","Casos confirmados (por 100 habitantes)" = "totalCases_per_100k_inhabitants") %>% 
  mutate(date=as.character(date)) %>%
  mutate(Data=as.Date(date, format=c('%Y-%m-%d'))) %>% 
  select(-date) %>% 
  mutate(ibgeID = as.numeric(substr(ibgeID,1,6)))

mun$Cidade[mun$Cidade=="ESTRANGEIRO/SP"] <- "S?o Paulo/SP"
mun$Cidade[mun$Cidade=="ESTRANGEIRO/PE"] <- "Recife/PE"
mun$Cidade[mun$Cidade=="ESTRANGEIRO/SC"] <- "Florian?polis/SC"
mun$Cidade[grep("N?O ESPECIFICADA",mun$Cidade)] <- "N?O ESPECIFICADA"
mun$Cidade[grep("INDEFINIDA",mun$Cidade)] <- "N?O ESPECIFICADA"
mun$Cidade[grep("CASO SEM LOCALIZA??O DEFINIDA",mun$Cidade)] <- "N?O ESPECIFICADA"

mun <- mun %>%
  filter(Cidade!="N?O ESPECIFICADA")


brazil_select_mun <- mun %>% 
  group_by(Data) %>% 
  summarise(`Casos confirmados`=sum(`Casos confirmados`)) %>% 
  mutate(num = ifelse(`Casos confirmados` >= 100, 1, 0)) %>%
  filter(`Casos confirmados`>0) %>% 
  mutate(start_date=cumsum(num)) %>% 
  select(-num) %>% 
  rename("Dias desde o 100o caso"="start_date")

brazil_select_mun$Pa?s <- "Brasil"

mun <- mun %>%
  mutate(`Taxa de mortalidade`=(Mortes/`Casos confirmados`)) %>% 
  group_by(Cidade) %>% 
  mutate(`Casos confirmados (m?dia m?vel, 10 dias)` = as.numeric(rollmean(`Casos confirmados`, k = 10, fill = NA, align = "right"))) %>% 
  ungroup() %>% 
  select(c("Cidade", "Estado", "ibgeID","Data", "Casos confirmados", "Mortes", "Casos confirmados (m?dia m?vel, 10 dias)", "Taxa de mortalidade","Casos confirmados (por 100 habitantes)"))


mun_max <- mun %>%
  group_by(Cidade) %>% 
  summarise(max=max(`Casos confirmados`)) %>% 
  arrange(-max) %>% 
  slice(1:15) %>%
  select(Cidade)


mun_select <- mun
mun_select$select <- mun$Cidade %in% mun_max$Cidade
mun_select <- mun_select %>% 
  filter(select==TRUE) %>% 
  select(-select)


mun_select <- mun_select %>%
  mutate(num = ifelse(`Casos confirmados` >= 100, 1, 0)) %>% 
  group_by(Cidade) %>% 
  filter(`Casos confirmados`>0) %>% 
  mutate(start_date=cumsum(num)) %>%
  select(-num) %>% 
  rename("Dias desde o 100o caso"="start_date")



mun <- mun %>%
  mutate(num = ifelse(`Casos confirmados` >= 100, 1, 0)) %>% 
  group_by(Cidade) %>% 
  filter(`Casos confirmados`>0) %>% 
  mutate(start_date=cumsum(num)) %>%
  select(-num) %>% 
  rename("Dias desde o 100o caso"="start_date")


# =================================================================
# 4 Municipalities population profile
# =================================================================

# # total population
# pop <- read.csv("psf_pop_dez_2019.csv",sep = ";")
# pop <- pop %>% rename("ibgeID" = "IBGE")
# 
# mun <- left_join(mun,pop, by = "ibgeID")
# 
# # percent of population with 60y+
# 
#         # IBGE - Estimativas populacionais enviadas para o TCU, estratificadas por idade e sexo pelo MS/SGEP/Datasus (2010)
#         # http://www2.datasus.gov.br/DATASUS/index.php?area=0206&id=6942&VObj=http://tabnet.datasus.gov.br/cgi/deftohtm.exe?ibge/cnv/pop
# 
# idosos <- read.csv("pop_mun_idade.csv",sep = ";")
# mun <- left_join(mun,idosos, by = "ibgeID")
# 
# # percent of deaths due to hypertension (icd-10: i10-15), diabetes (icd-10: e11-14), coronary heart disease (icd-10: i20-25) [preconditions]
# 
#       #total deaths
#       mun_deaths <- read.csv("total_mortes_mun_2018.csv",sep = ";") 
# 
# 
#       #deaths due to pre-conditions
#       preconditions <- read.csv("precond_mortes_mun_2018.csv",sep = ";") 
# 
# preconditions <- left_join(mun_deaths,preconditions, by = "ibgeID")
# preconditions <- preconditions %>% 
#   mutate(pcent_death_precond=preconditions/total_deaths) %>% 
#   select(c("ibgeID","pcent_death_precond"))
# 
# mun <- left_join(mun,preconditions, by = "ibgeID")
# 
# last <- mun %>% 
#   group_by(Data) %>% 
#   summarise() %>% 
#   arrange(desc(Data)) %>% 
#   dplyr::slice(1:1)
# 
# last <- last$Data
# 
# 
# mun_last <- mun %>%
#   filter(Data==last) %>% 
#   filter(`Casos confirmados`>=50)
# 
# teste <- mun_last %>% ggplot (aes(x=`Taxa de mortalidade`)) + geom_histogram()


# =================================================================
# 5 Government Response Tracker (Oxford)
# =================================================================

# data download
url_grt <- getURL('https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/data/OxCGRT_latest.csv')
grt <- read.csv(text = url_grt)


# selecting main variables
grt <- grt %>% 
  select(c('CountryName','Date','StringencyIndex')) %>% 
  mutate(CountryName=as.character(CountryName),Date=as.character(Date))

# renaming US to match covid dataset
grt$CountryName[grt$CountryName=="United States"] <- "US"

# selecting countries with the most confirmed cases and adjusting to merge
grt_select <- grt
grt_select$select <- grt$CountryName %in% covid_max$Country.Region
grt_select <- grt_select %>% 
  filter(select==T) %>% 
  select(-select) %>% 
  mutate(Data=as.Date(Date, format('%Y%m%d')),CountryName=as.factor(CountryName)) %>% 
  select(-Date) %>% 
  rename("Pa?s"="CountryName","?ndice de A??o Governamental"="StringencyIndex")

grt_select2 <- grt
grt_select2$select <- grt$CountryName %in% covid_max2$Country.Region
grt_select2 <- grt_select2 %>% 
  filter(select==T) %>% 
  select(-select) %>% 
  mutate(Data=as.Date(Date, format('%Y%m%d')),CountryName=as.factor(CountryName)) %>% 
  select(-Date) %>% 
  rename("Pa?s"="CountryName","?ndice de A??o Governamental"="StringencyIndex")


# mergin with covid database with selected countries

# -----------------------------------------------------------------
# selecting only the  13 countries with more cases + brasil
# -----------------------------------------------------------------
covid_max <- covid %>%
  group_by(Country.Region) %>% 
  summarise(max=max(cases)) %>% 
  arrange(-max) %>% 
  slice(1:12) %>%
  select(Country.Region)
covid_max[13,] <- "Brazil"

covid_select <- covid
covid_select$select <- covid$Country.Region %in% covid_max$Country.Region
covid_select <- covid_select %>%
  filter(select==TRUE) %>%
  mutate(Data=as.character(date)) %>% 
  mutate(Data=substring(date,2,length(date))) %>% 
  mutate(Data=as.Date(Data, format=c('%m.%d'))) %>%
  select(c('Country.Region','cases','deaths','recoveries','start_date','Data','max')) %>% 
  rename('Pa?s'='Country.Region') %>% 
  rename('Dias desde o 100o caso' = 'start_date') %>% 
  rename ('Casos confirmados' = 'cases') %>% 
  rename('Mortes'= 'deaths') %>%
  rename ('Casos recuperados'='recoveries')


# -----------------------------------------------------------------
# selecting only the 50 countries with more cases + brasil
# -----------------------------------------------------------------
covid_max2 <- covid %>%
  group_by(Country.Region) %>% 
  summarise(max=max(cases)) %>% 
  arrange(-max) %>% 
  slice(1:50) %>%
  select(Country.Region)

covid_select2 <- covid
covid_select2$select <- covid$Country.Region %in% covid_max2$Country.Region
covid_select2 <- covid_select2 %>%
  filter(select==TRUE) %>%
  mutate(Data=as.character(date)) %>% 
  mutate(Data=substring(date,2,length(date))) %>% 
  mutate(Data=as.Date(Data, format=c('%m.%d'))) %>%
  select(c('Country.Region','cases','deaths','recoveries','start_date','Data','max')) %>% 
  rename('Pa?s'='Country.Region') %>% 
  rename('Dias desde o 100o caso' = 'start_date') %>% 
  rename ('Casos confirmados' = 'cases') %>% 
  rename('Mortes'= 'deaths') %>%
  rename ('Casos recuperados'='recoveries')


#   



covid_select2 <- left_join(covid_select2,grt_select, by=c('Pa?s','Data'))

covid_select2 <- covid_select2 %>% 
  mutate(`?ndice de A??o Governamental` = dplyr::lag(`?ndice de A??o Governamental`,11),
         `Casos confirmados lag`= dplyr::lag(`Casos confirmados`,1)) %>% 
  mutate(`Var.% diária de casos confirmados (após 11 dias)`= (`Casos confirmados`)/(`Casos confirmados lag`)-1)


# covid_select2 <- left_join(covid_select2,grt_select2, by=c('Pa?s','Data'))
# 
# covid_select2 <- covid_select2 %>% 
#   mutate(`?ndice de A??o Governamental` = dplyr::lag(`?ndice de A??o Governamental`,11),
#          `Casos confirmados lag`= dplyr::lag(`Casos confirmados`,1)) %>% 
#   mutate(`Casos confirmados 11 dias depois (var%)`= (`Casos confirmados`)/(`Casos confirmados lag`)-1)



covid_select_scatter <- covid_select2 %>% filter(Pa?s!="China")
# covid_select_scatter2 <- covid_select2 %>% filter(Pa?s!="China")


plot1 <-  ggplot(covid_select_scatter,
                 aes(x = `?ndice de A??o Governamental`, y =`Var.% diária de casos confirmados (após 11 dias)`)) +
              geom_point(aes(size= `Casos confirmados`),color = "steelblue4") +
              geom_smooth(method='loess', color = "sienna2",fill = "sienna2") +
              scale_x_continuous(breaks = seq(0,100,10)) +
              scale_y_continuous(trans = 'log10',labels = percent) +
              annotation_logticks(alpha=0.7, sides = "l") +
              theme_gray() +
              theme(legend.position = "none", panel.grid.minor.y = element_blank()) +
              labs(title="Ações governamentais para promover distanciamento social S?o eficientes?",
                   subtitle="Amostra dos 50 Pa?ses com mais casos confirmados",
                   caption = "Fonte: Oxford COVID-19 Government Response Tracker and Johns Hopkins University (CSSE/JHU)")



# =================================================================
# 6 Traffic Congestion Intensity Data (IDB)
# =================================================================

tci <- read_csv('http://tiny.cc/idb-traffic-daily')

tci_br <- tci %>%
  filter(country_name=="Brazil" & region_slug!="country_brazil") %>%
  select(c("region_slug","region_name", "month","day","ratio_20","tcp","region_type"))

#filtering states
tci_br <- tci_br %>%
  filter(region_type == "city")

# mun$Cidade[grep("N?O ESPECIFICADA",mun$Cidade)] <- "N?O ESPECIFICADA"

# tci_br <- tci_br %>%
#   st_as_sf(wkt=5, crs=4326)
# 
# 
# #tci_br_shape %>% mapview(alpha=0.5, legend=F, map.types="OpenStreetMap")
# 
# # tci_br2 <- tci %>%
# #   filter(region_slug=="natal"|region_slug=="fortaleza")
# 
# #
# munbr_shape <- read_sf("C:/Users/Michel/Google Drive/DOUTORADO FGV/IEPS/Agua/shapefiles/Brazil_s.shp")
# munbr_shape <- munbr_shape %>% st_transform(4326)
# 
# tci_br <- st_join(tci_br,munbr_shape, join=st_overlaps)
# tci_br <- tci_br %>%
#   rename("ibgeID"="CD_GEOCODM") %>%
#   mutate(ibgeID=as.integer(ibgeID),aux=nchar(day)) %>%
#   mutate(Data=ifelse(aux==2, paste0("20200",month,day), paste0("20200",month,"0",day))) %>%
#   select(-c("aux","month","day")) %>%
#   mutate(Data=as.Date(Data, format('%Y%m%d')),region_slug=as.character(region_slug))
# 
# #tci_br <- left_join(tci_br,mun,by="ibgeID")
# 
# tci_br <- left_join(tci_br,mun,by=c("ibgeID","Data"))
# tci_br$`Casos confirmados`[is.na(tci_br$`Casos confirmados`)] <- 0
# tci_br <- tci_br %>%
#   group_by(region_slug, Data) %>%
#   summarise(mean(ratio_20),sum(`Casos confirmados`)) %>%
#   rename("Região metropolitana" = "region_slug")
# 
# map <- rbind(c("belem","Belém"),
#              c("belohorizonte","Belo Horizonte"),
#              c("brasilia","Bras??lia"),
#              c("campinas","Campinas"),
#              c("curitiba","Curitiba"),
#              c("florianopolis","Florianópolis"),
#              c("fortaleza","Fortaleza"),
#              c("goiana","Goiânia"),
#              c("joaopessoa","João Pessoa"),
#              c("joinville","Joinville"),
#              c("maceio","Maceió"),
#              c("manaus","Manaus"),
#              c("natal","Natal"),
#              c("porto_alegre","Porto Alegre"),
#              c("recife","Recife"),
#              c("riodejaneiro","Rio de Janeiro"),
#              c("salvador","Salvador"),
#              c("santos","Santos"),
#              c("saojosedoscampos","S?o José dos Campos"),
#              c("saoluis","S?o Lu??s"),
#              c("saopaulo","S?o Paulo"),
#              c("sorocaba","Sorocaba"),
#              c("teresina","Teresina"),
#              c("vitoria","Vitória"))
# 
# for (i in 1:nrow(map)){
#   tci_br$`Região metropolitana`[tci_br$`Região metropolitana`==map[i,1]]<-map[i,2]
# }
# 
# tci_br <- tci_br %>%
#   rename("Indice de Congestionamento de Tr?fego"="mean(ratio_20)","Casos confirmados"="sum(`Casos confirmados`)") %>%
#   mutate(`Indice de Congestionamento de Tr?fego`= dplyr::lag(`Indice de Congestionamento de Tr?fego`,11),
#          `Casos confirmados lag`= dplyr::lag(`Casos confirmados`,1)) %>%
#   mutate(`Var.% diária de casos confirmados (após 11 dias)`= (`Casos confirmados`)/(`Casos confirmados lag`)-1)
# 
# tci_br <- tci_br %>%
#   filter(`Indice de Congestionamento de Tr?fego`<=1.5)
# 
# plot2 <-  ggplot(tci_br,
#                  aes(x = `Indice de Congestionamento de Tr?fego`, y =`Var.% diária de casos confirmados (após 11 dias)`)) +
#               geom_point(aes(size= `Casos confirmados`),color = "steelblue4") +
#               geom_smooth(method='loess', color = "sienna2",fill = "sienna2") +
#               scale_x_reverse(breaks = seq(0,2,0.25),labels = percent) +
#               scale_y_continuous(trans = 'log10',labels = percent) +
#               geom_vline(xintercept=0.75, linetype="dashed", color = "red") +
#               annotation_logticks(alpha=0.7, sides = "l") +
#               theme_gray() +
#               theme(legend.position = "none", panel.grid.minor.y = element_blank(),axis.text.x = element_text(angle=90)) +
#               labs(title="Ações governamentais para promover distanciamento social S?o eficientes?",
#                    subtitle="Amostra de 24 regiões metropolitanas no Brasil",
#                    caption = "Fonte: IDB And IDB Invest Coronavirus Impact Dashboard (2020) and labs.wesleycota.com/sarscov2/br/.")
# 




# 
# # municipalities shapefile
# shapefile <- read_sf("C:/Users/Michel/Google Drive/DOUTORADO FGV/IEPS/Agua/shapefiles/Brazil_s.shp")
# shapefile <- shapefile %>% st_transform(4326)
# 
# shapefile <- shapefile %>%
#   filter(CD_GEOCODM %in% mun_max$ibgeID)
# 
# shapefile <- shapefile %>%
#   filter(NM_MUNICIP=="ARACAJU" | NM_MUNICIP=="CAMPO GRANDE" | NM_MUNICIP=="GUARULHOS" | NM_MUNICIP=="ITAJAÍ" | NM_MUNICIP=="NITERÓI" | NM_MUNICIP=="SANTO ANDRÉ" | NM_MUNICIP=="SÃO BERNARDO DO CAMPO" | NM_MUNICIP=="SÃO CAETANO DO SUL" | NM_MUNICIP=="VILA VELHA")
# 
# shapefile <- st_cast(shapefile,"POINT")
# st_write(shapefile, "C:/Users/Michel/Google Drive/Website/add_request_iadb2.csv", layer_options = "GEOMETRY=AS_XY")



# municipalities shapefile
shapefile <- read_sf("C:/Users/Michel/Google Drive/DOUTORADO FGV/IEPS/Agua/shapefiles/Brazil_s.shp")
shapefile <- shapefile %>% st_transform(4326)
shapefile <- shapefile %>% mutate(ibgeID = as.numeric(substr(CD_GEOCODM,1,6))) %>% select(c("ibgeID","geometry","NM_MUNICIP"))

mun <- right_join(mun, shapefile, by = "ibgeID")
mun <- mun %>% st_as_sf %>% st_transform(4326)


```

Esta p?gina tem o objetivo de apresentar algumas visualiza??es dos dados de COVID-19. Utilizou-se duas fontes de dados:

* [Center for Systems Science and Engineering (CSSE)](https://github.com/CSSEGISandData/COVID-19) da John Hopkins University, que tem coletado diariamente de diversas fontes dados sobre o COVID-19 a n?vel de Pa?s.

* Dados dos casos de COVID-19 confirmados por munic?pios brasileiros consolidados e disponibilizados em [labs.wesleycota.com/sarscov2/br/](https://labs.wesleycota.com/sarscov2/br/)

* **NOVO**: ?ndice de A??o Governamental em resposta ao COVID-19] da [Universidade de Oxford](https://www.bsg.ox.ac.uk/research/research-projects/oxford-covid-19-government-response-tracker).


Os dados nessa p?gina S?o atualizados uma vez ao dia e por isso podem aparecer defasados em rela??o ?s not?cias. No entanto, a ideia dessas visualizações é apresentar as tend?ncias de crescimento dos casos confirmados de COVID-19 e mortes causadas por COVID-19. Os dados do ?ndice de A??o Governamental

**Aproveite a interatividade dos gr?ficos!** Eles possuem um _menu_ no canto superior direito e ? poss?vel:

* `dar zoom`,
* `comparar dados em hover`
* `clicar na legenda para filtrar o que será plotado no gráfico`
* `fazer download de um snapshot`



Qualquer sugest?o, d?vida, questionamento entre em contato: [`mszklo@gmail.com`](mszklo@gmail.com)

# COVID-19 no Brasil


## Total de pessoas afetadas

```{r, results='asis', fig.width=8, fig.height=4.2}

brazil_aff <- ggplot(covid_brazil_aff,
                  aes(x=`Data`,
                      y=N?mero,
                      fill=Afetados)) +
                geom_area() +
                scale_y_continuous(labels = comma) +
                scale_x_date(date_minor_breaks = "2 day",
                               breaks = "2 day",
                               labels = date_format("%d-%m")) +
                scale_fill_brewer(palette="Set2",name="") +
                theme_minimal() +
                theme(plot.title = element_text(size = 12),
                      axis.title.y=element_blank(),
                      axis.text.x = element_text(angle=90)) +
                theme(plot.title = element_text(size = 12),
                        panel.grid.major = element_blank())

brazil_aff %>%
  ggplotly() %>%
  layout(dragmode = 'pan',hovermode='compare')



```

<font size = '2'><a href="https://github.com/CSSEGISandData/COVID-19"> Fonte: Center for Systems Science and Engineering (CSSE) at Johns Hopkins University (JHU)</a></font>
<br>
<font size = '2'> Atualizado em: 28 de Abril, 2020</font>


## Novos casos confirmados

Os gr?ficos abaixo representam a m?dia m?vel (10 dias) de casos confirmados por dia a partir do 100o caso para os 15 estados e 15 cidades brasileiras onde foram registrados os maiores n?meros de casos. Os dados est?o organizados de forma que o primeiro dia representa o dia em que foi registrado o 100o caso. 

### Estados

```{r, results='asis', fig.width=8, fig.height=6}

end <- max(estado_select$`Dias desde o 100o caso`)
max <- max(estado_select$`Casos confirmados (m?dia m?vel, 10 dias)`,na.rm = T)

reg_scale <- ggplot(estado_select,
                  aes(x=`Dias desde o 100o caso`,
                      y=`Casos confirmados (m?dia m?vel, 10 dias)`,
                      color=Estado)) +
                  geom_line(size=0.5, alpha=0.7) +
                  scale_fill_brewer(palette="Set1") +
                  scale_y_continuous(trans = 'log10',labels = comma, limits = c(100,max)) +
                  scale_x_continuous(breaks=seq(0,end,by=2)) +
                  ggtitle('Novos casos de COVID-19 (escala logar?timica)') +
                  theme_minimal() +
                  theme(plot.title = element_text(size = 12),
                        panel.grid.major = element_blank())

reg_scale %>% ggplotly() %>% layout(dragmode = 'pan')

```

<font size = '2'><a href="https://labs.wesleycota.com/sarscov2/br/"> Fonte: labs.wesleycota.com/sarscov2/br/</a></font>
<br>
<font size = '2'> Atualizado em: 28 de Abril, 2020</font>


### Munic?pios

```{r, results='asis', fig.width=8, fig.height=6}

end <- max(mun_select$`Dias desde o 100o caso`)
max <- max(mun_select$`Casos confirmados (m?dia m?vel, 10 dias)`,na.rm = T)

reg_scale <- ggplot(mun_select,
                  aes(x=`Dias desde o 100o caso`,
                      y=`Casos confirmados (m?dia m?vel, 10 dias)`,
                      color=Cidade)) +
                  geom_line(size=0.5, alpha=0.7) +
                  scale_fill_brewer(palette="Set1") +
                  scale_y_continuous(trans = 'log10',labels = comma, limits = c(100,max)) +
                  scale_x_continuous(breaks=seq(0,end,by=2)) +
                  ggtitle('Novos casos de COVID-19 (escala logar?timica)') +
                  theme_minimal() +
                  theme(plot.title = element_text(size = 12),
                        panel.grid.major = element_blank())

reg_scale %>% ggplotly() %>% layout(dragmode = 'pan')

```

<font size = '2'><a href="https://labs.wesleycota.com/sarscov2/br/"> Fonte: labs.wesleycota.com/sarscov2/br/</a></font>
<br>
<font size = '2'> Atualizado em: 28 de Abril, 2020</font>


## Total de casos confirmados

```{r, results='asis', fig.width=8, fig.height=6}
mun_map <- mun
mun_map$`Casos confirmados`[is.na(mun_map$`Casos confirmados`)] <- 0
mun_map$Mortes[is.na(mun_map$Mortes)] <- 0
mun_map$`Taxa de mortalidade`[is.na(mun_map$`Taxa de mortalidade`)] <- 0
mun_map$`Dias desde o 100o caso`[is.na(mun_map$`Dias desde o 100o caso`)] <- 0
mun_map$`Casos confirmados (por 100 habitantes)`[is.na(mun_map$`Casos confirmados (por 100 habitantes)`)] <- 0


hoje <- max(mun_map$Data, na.rm = T)
mun_map$Data[is.na(mun_map$Data)] <- hoje 

mun_map <- mun_map %>% ungroup() %>%  filter(Data==max(Data)) %>% mutate(Cidade = NM_MUNICIP) %>% select(c("Cidade","Casos confirmados","Mortes", "Taxa de mortalidade","Dias desde o 100o caso","Casos confirmados (por 100 habitantes)"))


max_casos <- max(mun_map$`Casos confirmados`, na.rm = T)
color_map <- c('#fff5f0','#fee0d2','#fcbba1','#fc9272','#fb6a4a','#ef3b2c','#cb181d','#a50f15','#67000d')
mapview <- mun_map %>% mapview(zcol="Casos confirmados",
                                color = "#000000", legend=T, layer.name = "Total de casos confirmados", 
                                alpha.region=0.8, alpha=0.05, at = c(0,round(lseq(1,max_casos,9),0)), col.regions = color_map,
                               map.types = c("CartoDB.Positron", "OpenStreetMap.DE"))

mapshot(mapview,url = "C:/Users/Michel/Google Drive/Website/mapateste.html")


max_casos100k <- round(max(mun_map$`Casos confirmados (por 100 habitantes)`, na.rm = T),0)
mapview <- mun_map %>% mapview(zcol="Casos confirmados (por 100 habitantes)",
                                color = "#000000", legend=T, layer.name = "Casos confirmados (por 100 habitantes)", 
                                alpha.region=0.8, alpha=0.05, col.regions = color_map,
                               map.types = c("CartoDB.Positron", "OpenStreetMap.DE"),
                               at = c(0, round(seq(10,50,length.out = 4),0), round(seq(100,500,length.out =  4),0), max_casos100k))

mapshot(mapview,url = "C:/Users/Michel/Google Drive/Website/mapateste2.html")

col.regions = color_graph
```

<font size = '2'><a href="https://labs.wesleycota.com/sarscov2/br/"> Fonte: labs.wesleycota.com/sarscov2/br/</a></font>
<br>
<font size = '2'> Atualizado em: 28 de Abril, 2020</font>



## Casos confirmados por Estado


### Dias desde o 100o caso

Abaixo, as curvas dos 15 estados brasileiros onde foram registrados os maiores N?meros de casos. Os dados estão organizados de forma que o dia 1 de cada estado é o dia em que foi registrado o primeiro caso de COVID-19.

```{r, results='asis', fig.width=8, fig.height=6}

end <- max(estado_select$`Dias desde o 100o caso`)

reg_scale <- ggplot(estado_select,
                  aes(x=`Dias desde o 100o caso`,
                      y=`Casos confirmados`,
                      color=Estado)) +
                  geom_line(size=0.5, alpha=0.7) +
                  geom_line(data=brazil_select,
                             aes(x=`Dias desde o 100o caso`,
                                 y=`Casos confirmados`,
                                 color=Pa?s),
                             size=0.5,
                            alpha=0.5,
                            linetype="dashed") +
                  scale_fill_brewer(palette="Set1") +
                  scale_x_continuous(breaks=seq(0,end,by=2)) +
                  ggtitle('Casos confirmados de COVID-19') +
                  theme_minimal() +
                  theme(plot.title = element_text(size = 12),
                        panel.grid.major = element_blank())

reg_scale %>% ggplotly() %>% layout(dragmode = 'pan')

```

<font size = '2'><a href="https://labs.wesleycota.com/sarscov2/br/"> Fonte: labs.wesleycota.com/sarscov2/br/</a></font>
<br>
<font size = '2'> Atualizado em: 28 de Abril, 2020</font>


```{r, results='asis', fig.width=8, fig.height=6}
end <- max(estado_select$`Dias desde o 100o caso`)

reg_scale <- ggplot(estado_select,
                  aes(x=`Dias desde o 100o caso`,
                      y=`Casos confirmados`,
                      color=Estado)) +
                  geom_line(size=0.5, alpha=0.7) +
                  geom_line(data=brazil_select,
                             aes(x=`Dias desde o 100o caso`,
                                 y=`Casos confirmados`,
                                 color=Pa?s),
                             size=0.5,
                            alpha=0.5,
                            linetype="dashed") +
                  scale_fill_brewer(palette="Set1") +
                  scale_y_continuous(trans = 'log10',labels = comma) +
                  scale_x_continuous(breaks=seq(0,end,by=2)) +
                  ggtitle('Casos confirmados de COVID-19 (escala log)') +
                  theme_minimal() +
                  theme(plot.title = element_text(size = 12),
                        panel.grid.major = element_blank())

reg_scale %>% ggplotly() %>% layout(dragmode = 'pan')

```

<font size = '2'><a href="https://labs.wesleycota.com/sarscov2/br/"> Fonte: labs.wesleycota.com/sarscov2/br/</a></font>
<br>
<font size = '2'> Atualizado em: 28 de Abril, 2020</font>

### Ordem cronológica

Abaixo, as curvas estão organizadas por ordem cronológica.

```{r, results='asis', fig.width=8, fig.height=6}
end <- max(estado_select$`Dias desde o 100o caso`)

reg_scale <- ggplot(estado_select,
                  aes(x=Data,
                      y=`Casos confirmados`,
                      color=Estado)) +
                  geom_line(size=0.5, alpha=0.7) +
                  geom_line(data=brazil_select,
                             aes(x=Data,
                                 y=`Casos confirmados`,
                                 color=Pa?s),
                             size=0.5,
                            alpha=0.5,
                            linetype="dashed") +
                  scale_fill_brewer(palette="Set1") +
                  scale_y_continuous(trans = 'log10',labels = comma) +
                  scale_x_date(date_minor_breaks = "2 day",
                               breaks = "2 day",
                               labels = date_format("%d-%m")) +
                  ggtitle('Casos confirmados de COVID-19 (escala log)') +
                  theme_minimal() +
                  theme(plot.title = element_text(size = 12),
                        panel.grid.major = element_blank(),
                        axis.text.x = element_text(angle=90))

reg_scale %>% ggplotly() %>% layout(dragmode = 'pan')

```

<font size = '2'><a href="https://labs.wesleycota.com/sarscov2/br/"> Fonte: labs.wesleycota.com/sarscov2/br/</a></font>
<br>
<font size = '2'> Atualizado em: 28 de Abril, 2020</font>


## Mortes por Estado


### Dias desde o 100o caso

Abaixo, as curvas dos 15 estados brasileiros onde foram registrados os maiores N?meros de casos. Os dados estão organizados de forma que o dia 1 de cada estado é o dia em que foi registrado o primeiro caso de COVID-19.

```{r, results='asis', fig.width=8, fig.height=6}

end <- max(estado_select$`Dias desde o 100o caso`)

reg_scale <- ggplot(estado_select,
                  aes(x=`Dias desde o 100o caso`,
                      y=Mortes,
                      color=Estado)) +
                  geom_line(size=0.5, alpha=0.7) +
                  geom_line(data=brazil_select,
                             aes(x=`Dias desde o 100o caso`,
                                 y=Mortes,
                                 color=Pa?s),
                             size=0.5,
                            alpha=0.5,
                            linetype="dashed") +
                  scale_fill_brewer(palette="Set1") +
                  scale_x_continuous(breaks=seq(0,end,by=2)) +
                  ggtitle('Mortes por COVID-19') +
                  theme_minimal() +
                  theme(plot.title = element_text(size = 12),
                        panel.grid.major = element_blank())

reg_scale %>% ggplotly() %>% layout(dragmode = 'pan')

```

<font size = '2'><a href="https://labs.wesleycota.com/sarscov2/br/"> Fonte: labs.wesleycota.com/sarscov2/br/</a></font>
<br>
<font size = '2'> Atualizado em: 28 de Abril, 2020</font>


```{r, results='asis', fig.width=8, fig.height=6}
end <- max(estado_select$`Dias desde o 100o caso`)

reg_scale <- ggplot(estado_select,
                  aes(x=`Dias desde o 100o caso`,
                      y=Mortes,
                      color=Estado)) +
                  geom_line(size=0.5, alpha=0.7) +
                  geom_line(data=brazil_select,
                             aes(x=`Dias desde o 100o caso`,
                                 y=Mortes,
                                 color=Pa?s),
                             size=0.5,
                            alpha=0.5,
                            linetype="dashed") +
                  scale_fill_brewer(palette="Set1") +
                  scale_y_continuous(trans = 'log10',labels = comma) +
                  scale_x_continuous(breaks=seq(0,end,by=2)) +
                  ggtitle('Mortes por COVID-19 (escala log)') +
                  theme_minimal() +
                  theme(plot.title = element_text(size = 12),
                        panel.grid.major = element_blank())

reg_scale %>% ggplotly() %>% layout(dragmode = 'pan')

```

<font size = '2'><a href="https://labs.wesleycota.com/sarscov2/br/"> Fonte: labs.wesleycota.com/sarscov2/br/</a></font>
<br>
<font size = '2'> Atualizado em: 28 de Abril, 2020</font>



## Casos confirmados por munic?pio


### Dias desde o 100o caso

Abaixo, as curvas dos 15 munic?pios brasileiros onde foram registrados os maiores N?meros de casos. Os dados estão organizados de forma que o dia 1 de cada munic?pio é o dia em que foi registrado o primeiro caso de COVID-19.

```{r, results='asis', fig.width=8, fig.height=6}
end <- max(mun_select$`Dias desde o 100o caso`)

reg_scale <- ggplot(mun_select,
                  aes(x=`Dias desde o 100o caso`,
                      y=`Casos confirmados`,
                      color=Cidade)) +
                  geom_line(size=0.5, alpha=0.7) +
                  scale_fill_brewer(palette="Set1") +
                  scale_x_continuous(breaks=seq(0,end,by=2)) +
                  ggtitle('Casos confirmados de COVID-19') +
                  theme_minimal() +
                  theme(plot.title = element_text(size = 12),
                        panel.grid.major = element_blank())

reg_scale %>% ggplotly() %>% layout(dragmode = 'pan')

```

<font size = '2'><a href="https://labs.wesleycota.com/sarscov2/br/"> Fonte: labs.wesleycota.com/sarscov2/br/</a></font>
<br>
<font size = '2'> Atualizado em: 28 de Abril, 2020</font>


```{r, results='asis', fig.width=8, fig.height=6}
end <- max(mun_select$`Dias desde o 100o caso`)

reg_scale <- ggplot(mun_select,
                  aes(x=`Dias desde o 100o caso`,
                      y=`Casos confirmados`,
                      color=Cidade)) +
                  geom_line(size=0.5, alpha=0.7) +
                  scale_fill_brewer(palette="Set1") +
                  scale_y_continuous(trans = 'log10',labels = comma) +
                  scale_x_continuous(breaks=seq(0,end,by=2)) +
                  ggtitle('Casos confirmados de COVID-19 (escala log)') +
                  theme_minimal() +
                  theme(plot.title = element_text(size = 12),
                        panel.grid.major = element_blank())

reg_scale %>% ggplotly() %>% layout(dragmode = 'pan')

```

<font size = '2'><a href="https://labs.wesleycota.com/sarscov2/br/"> Fonte: labs.wesleycota.com/sarscov2/br/</a></font>
<br>
<font size = '2'> Atualizado em: 28 de Abril, 2020</font>

### Ordem cronológica

Abaixo, as curvas estão organizadas por ordem cronológica.

```{r, results='asis', fig.width=8, fig.height=6}
end <- max(mun_select$`Dias desde o 100o caso`)

reg_scale <- ggplot(mun_select,
                  aes(x=Data,
                      y=`Casos confirmados`,
                      color=Cidade)) +
                  geom_line(size=0.5, alpha=0.7) +
                  scale_fill_brewer(palette="Set1") +
                  scale_y_continuous(trans = 'log10',labels = comma) +
                  scale_x_date(date_minor_breaks = "2 day",
                               breaks = "2 day",
                               labels = date_format("%d-%m")) +
                  ggtitle('Casos confirmados de COVID-19 (escala log)') +
                  theme_minimal() +
                  theme(plot.title = element_text(size = 12),
                        panel.grid.major = element_blank(),
                        axis.text.x = element_text(angle=90))

reg_scale %>% ggplotly() %>% layout(dragmode = 'pan')

```

<font size = '2'><a href="https://labs.wesleycota.com/sarscov2/br/"> Fonte: labs.wesleycota.com/sarscov2/br/</a></font>
<br>
<font size = '2'> Atualizado em: 28 de Abril, 2020</font>



## Mortes por munic?pio


### Dias desde o 100o caso

Abaixo, as curvas dos 15 munic?pios brasileiros onde foram registrados os maiores N?meros de casos. Os dados estão organizados de forma que o dia 1 de cada munic?pio é o dia em que foi registrado o primeiro caso de COVID-19.

```{r, results='asis', fig.width=8, fig.height=6}
end <- max(mun_select$`Dias desde o 100o caso`)

reg_scale <- ggplot(mun_select,
                  aes(x=`Dias desde o 100o caso`,
                      y=Mortes,
                      color=Cidade)) +
                  geom_line(size=0.5, alpha=0.7) +
                  scale_fill_brewer(palette="Set1") +
                  scale_x_continuous(breaks=seq(0,end,by=2)) +
                  ggtitle('Mortes por COVID-19') +
                  theme_minimal() +
                  theme(plot.title = element_text(size = 12),
                        panel.grid.major = element_blank())

reg_scale %>% ggplotly() %>% layout(dragmode = 'pan')

```

<font size = '2'><a href="https://labs.wesleycota.com/sarscov2/br/"> Fonte: labs.wesleycota.com/sarscov2/br/</a></font>
<br>
<font size = '2'> Atualizado em: 28 de Abril, 2020</font>


```{r, results='asis', fig.width=8, fig.height=6}
end <- max(mun_select$`Dias desde o 100o caso`)

reg_scale <- ggplot(mun_select,
                  aes(x=`Dias desde o 100o caso`,
                      y=Mortes,
                      color=Cidade)) +
                  geom_line(size=0.5, alpha=0.7) +
                  scale_fill_brewer(palette="Set1") +
                  scale_y_continuous(trans = 'log10',labels = comma) +
                  scale_x_continuous(breaks=seq(0,end,by=2)) +
                  ggtitle('Mortes por COVID-19 (escala log)') +
                  theme_minimal() +
                  theme(plot.title = element_text(size = 12),
                        panel.grid.major = element_blank())

reg_scale %>% ggplotly() %>% layout(dragmode = 'pan')

```

<font size = '2'><a href="https://labs.wesleycota.com/sarscov2/br/"> Fonte: labs.wesleycota.com/sarscov2/br/</a></font>
<br>
<font size = '2'> Atualizado em: 28 de Abril, 2020</font>









# Brasil em contexto internacional

## Ação Governamental em resposta ao COVID-19

Os gráficos abaixo apresentam o ?ndice de A??o Governamental (_Stringency Index_) calculado pela iniciativa [The Oxford COVID-19 Government Response Tracker](https://www.bsg.ox.ac.uk/research/research-projects/oxford-covid-19-government-response-tracker), que tem como objetivo monitorar e comparar de forma rigorosa e consistente como os governos nacionais tem respondido ao coronavirus. Quanto maior o ?ndice, mais rigorosa S?o as ações dos governos em resposta ao coronavirus.

OBS: este site baixa os dados do _The Oxford COVID-19 Government Response Tracker_ diariamente, mas nem sempre os dados para todos os Pa?ses estão atualizados para o dia mais recente.


### Dias desde o 100o caso

Abaixo, as curvas dos Pa?ses estão organizadas de forma que o dia 1 de cada Pa?s é o dia em que foi registrado o primeiro caso de COVID-19.


```{r, results='asis', fig.width=8, fig.height=4.9}
covid_select_brazil <- covid_select %>% filter(Pa?s=="Brazil")

reg_scale <- ggplot(covid_select,
                  aes(x=`Dias desde o 100o caso`,
                      y=`?ndice de A??o Governamental`,
                      color=Pa?s)) +
                  geom_line(size=0.5, alpha=0.5, linetype="dotted") +
                      geom_line(data=covid_select_brazil,
                             aes(x=`Dias desde o 100o caso`,
                                 y=`?ndice de A??o Governamental`,
                                 color=Pa?s),
                             size=1,
                            alpha=1) +
                  scale_fill_brewer(palette="Set3") +
                  scale_x_continuous(breaks=seq(0,90,by=5)) +
                  ggtitle('Casos confirmados de COVID-19') +
                  theme_minimal() +
                  theme(plot.title = element_text(size = 12),
                        panel.grid.major = element_blank())

reg_scale %>% ggplotly() %>% layout(dragmode = 'pan')

```


<font size = '2'><a href="https://www.bsg.ox.ac.uk/research/research-projects/oxford-covid-19-government-response-tracker"> Fonte: Hale, Thomas and Samuel Webster (2020). Oxford COVID-19 Government Response Tracker.</a></font>
<br>
<font size = '2'> Atualizado em: 28 de Abril, 2020</font> 


### Ordem cronológica
Abaixo, as curvas estão organizadas por ordem cronológica.

```{r, results='asis', fig.width=8, fig.height=4.9}

covid_select_brazil <- covid_select %>% filter(Pa?s=="Brazil")


log_scale <- ggplot(covid_select,
                  aes(x=Data,
                      y=`?ndice de A??o Governamental`,
                      color=Pa?s)) +
                  geom_line(size=0.5, alpha=0.5, linetype="dotted") +
                  geom_line(data=covid_select_brazil,
                             aes(x=`Data`,
                                 y=`?ndice de A??o Governamental`,
                                 color=Pa?s),
                             size=1,
                            alpha=1) +
                  scale_fill_brewer(palette="Set3") +
                  scale_x_date(date_minor_breaks = "5 day",
                               breaks = "5 day",
                               labels = date_format("%d-%m")) +
                  ggtitle("Casos confirmados de COVID-19 (escala log)") +
                  theme_minimal() +
                  theme(plot.title = element_text(size = 12),
                        axis.title.y=element_blank(),
                        axis.text.x = element_text(angle=90),
                        panel.grid.major = element_blank())

log_scale %>% ggplotly() %>% layout(dragmode = 'pan')

```

<font size = '2'><a href="https://www.bsg.ox.ac.uk/research/research-projects/oxford-covid-19-government-response-tracker"> Fonte: Hale, Thomas and Samuel Webster (2020). Oxford COVID-19 Government Response Tracker.</a></font>
<br>
<font size = '2'> Atualizado em: 28 de Abril, 2020</font> 




## Total de pessoas afetadas no mundo

```{r, results='asis', fig.width=8, fig.height=4.2}
all <- ggplot(covid_all,aes(x=Data)) +
                  geom_area(aes(y=`Casos confirmados`, fill="Casos confirmados")) +
                  geom_area(aes(y=`Casos recuperados`, fill="Casos recuperados")) +
                  geom_area(aes(y=`Mortes`, fill="Mortes")) +
                  scale_x_date(date_minor_breaks = "1 day",
                               breaks = "5 day",
                               labels = date_format("%d-%m")) +
                  scale_y_continuous(labels = comma) +
                  scale_fill_brewer(palette="Set2",name="") +
                  ggtitle('Pessoas afetadas') +
                  theme_minimal() +
                  theme(plot.title = element_text(size = 12),
                        axis.title.y=element_blank(),
                        axis.text.x = element_text(angle=90),
                        panel.grid.major = element_blank())

all %>% ggplotly() %>% layout(dragmode = 'pan',
                              hovermode='compare')

```

<font size = '2'><a href="https://github.com/CSSEGISandData/COVID-19"> Fonte: Center for Systems Science and Engineering (CSSE) at Johns Hopkins University (JHU)</a></font>
<br>
<font size = '2'> Atualizado em: 28 de Abril, 2020</font>

## Casos confirmados por Pa?s

### Dias desde o 100o caso

Abaixo, as curvas dos Pa?ses estão organizadas de forma que o dia 1 de cada Pa?s é o dia em que foi registrado o primeiro caso de COVID-19.


```{r, results='asis', fig.width=8, fig.height=4.9}
covid_select_brazil <- covid_select %>% filter(Pa?s=="Brazil")

reg_scale <- ggplot(covid_select,
                  aes(x=`Dias desde o 100o caso`,
                      y=`Casos confirmados`,
                      color=Pa?s)) +
                  geom_line(size=0.5, alpha=0.5, linetype="dotted") +
                      geom_line(data=covid_select_brazil,
                             aes(x=`Dias desde o 100o caso`,
                                 y=`Casos confirmados`,
                                 color=Pa?s),
                             size=1,
                            alpha=1) +
                  scale_fill_brewer(palette="Set3") +
                  scale_x_continuous(breaks=seq(0,90,by=5)) +
                  ggtitle('Casos confirmados de COVID-19') +
                  theme_minimal() +
                  theme(plot.title = element_text(size = 12),
                        panel.grid.major = element_blank())

reg_scale %>% ggplotly() %>% layout(dragmode = 'pan')

```


<font size = '2'><a href="https://github.com/CSSEGISandData/COVID-19"> Fonte: Center for Systems Science and Engineering (CSSE) at Johns Hopkins University (JHU)</a></font>
<br>
<font size = '2'> Atualizado em: 28 de Abril, 2020</font>     
             
```{r, results='asis', fig.width=8, fig.height=4.9}

covid_select_brazil <- covid_select %>% filter(Pa?s=="Brazil")


log_scale <- ggplot(covid_select,
                  aes(x=`Dias desde o 100o caso`,
                      y=`Casos confirmados`,
                      color=Pa?s)) +
                  geom_line(size=0.5, alpha=0.5, linetype="dotted") +
                    geom_line(data=covid_select_brazil,
                             aes(x=`Dias desde o 100o caso`,
                                 y=`Casos confirmados`,
                                 color=Pa?s),
                             size=1,
                            alpha=1) +
                  scale_fill_brewer(palette="Set3") +
                  scale_y_continuous(trans = 'log10',labels = comma) +
                  scale_x_continuous(breaks=seq(0,90,by=5)) +
                  ggtitle("Casos confirmados de COVID-19 (escala log)") +
                  theme_minimal() +
                  theme(plot.title = element_text(size = 12),
                        panel.grid.major = element_blank())

log_scale %>% ggplotly() %>% layout(dragmode = 'pan')


```

<font size = '2'><a href="https://github.com/CSSEGISandData/COVID-19"> Fonte: Center for Systems Science and Engineering (CSSE) at Johns Hopkins University (JHU)</a></font>
<br>
<font size = '2'> Atualizado em: 28 de Abril, 2020</font>

### Ordem cronológica
Abaixo, as curvas estão organizadas por ordem cronológica.

```{r, results='asis', fig.width=8, fig.height=4.9}

covid_select_brazil <- covid_select %>% filter(Pa?s=="Brazil")


log_scale <- ggplot(covid_select,
                  aes(x=Data,
                      y=`Casos confirmados`,
                      color=Pa?s)) +
                  geom_line(size=0.5, alpha=0.5, linetype="dotted") +
                  geom_line(data=covid_select_brazil,
                             aes(x=`Data`,
                                 y=`Casos confirmados`,
                                 color=Pa?s),
                             size=1,
                            alpha=1) +
                  scale_fill_brewer(palette="Set3") +
                  scale_y_continuous(trans = 'log10',labels = comma) +
                  scale_x_date(date_minor_breaks = "5 day",
                               breaks = "5 day",
                               labels = date_format("%d-%m")) +
                  ggtitle("Casos confirmados de COVID-19 (escala log)") +
                  theme_minimal() +
                  theme(plot.title = element_text(size = 12),
                        axis.title.y=element_blank(),
                        axis.text.x = element_text(angle=90),
                        panel.grid.major = element_blank())

log_scale %>% ggplotly() %>% layout(dragmode = 'pan')

```

<font size = '2'><a href="https://github.com/CSSEGISandData/COVID-19"> Fonte: Center for Systems Science and Engineering (CSSE) at Johns Hopkins University (JHU)</a></font>
<br>
<font size = '2'> Atualizado em: 28 de Abril, 2020</font>



## Mortes por Pa?s

```{r, results='asis', fig.width=8, fig.height=4.9}

covid_select_brazil <- covid_select %>% filter(Pa?s=="Brazil")

reg_scale <- ggplot(covid_select,
                  aes(x=`Dias desde o 100o caso`,
                      y=`Mortes`,
                      color=Pa?s)) +
                  geom_line(size=0.5, alpha=0.5,linetype="dotted") +
                  geom_line(data=covid_select_brazil,
                             aes(x=`Dias desde o 100o caso`,
                                 y=Mortes,
                                 color=Pa?s),
                             size=1,
                            alpha=1) +
                  scale_fill_brewer(palette="Set3") +
                  scale_x_continuous(breaks=seq(0,90,by=5)) +
                  ggtitle('Mortes por COVID-19') +
                  theme_minimal() +
                  theme(plot.title = element_text(size = 12),
                        panel.grid.major = element_blank())


reg_scale %>% ggplotly() %>% layout(dragmode = 'pan')

```

<font size = '2'><a href="https://github.com/CSSEGISandData/COVID-19"> Fonte: Center for Systems Science and Engineering (CSSE) at Johns Hopkins University (JHU)</a></font>
<br>
<font size = '2'> Atualizado em: 28 de Abril, 2020</font>

```{r, results='asis', fig.width=8, fig.height=4.9}
covid_select_brazil <- covid_select %>% filter(Pa?s=="Brazil")

reg_scale <- ggplot(covid_select,
                  aes(x=`Dias desde o 100o caso`,
                      y=`Mortes`,
                      color=Pa?s)) +
                  geom_line(size=0.5, alpha=0.5, linetype="dotted") +
                  geom_line(data=covid_select_brazil,
                             aes(x=`Dias desde o 100o caso`,
                                 y=Mortes,
                                 color=Pa?s),
                             size=1,
                            alpha=1) +
                  scale_fill_brewer(palette="Set3") +
                  scale_y_continuous(trans = 'log10',labels = comma) +
                  scale_x_continuous(breaks=seq(0,90,by=5)) +
                  ggtitle('Mortes por COVID-19 (escala log)') +
                  theme_minimal() +
                  theme(plot.title = element_text(size = 12),
                        panel.grid.major = element_blank())


reg_scale %>% ggplotly() %>% layout(dragmode = 'pan')

```

<font size = '2'><a href="https://github.com/CSSEGISandData/COVID-19"> Fonte: Center for Systems Science and Engineering (CSSE) at Johns Hopkins University (JHU)</a></font>
<br>
<font size = '2'> Atualizado em: 28 de Abril, 2020</font>

